{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>"},{"location":"#_1","title":"Home","text":"<p>Built with \u2665 by: Erik L. Hodges Ph.D. LinkedIn / GitHub </p> <p></p>"},{"location":"documentation/","title":"Documentation","text":""},{"location":"documentation/#dawgpyllibs","title":"dawgpyl/libs","text":"<p>The libs directory contains the modules, classes, and functions required to assign large language models to agents to accomplish agentic workflows.</p> <p>Modules:</p> Name Description <code>common</code> <code>core</code> <p>This module contains the base and extended classes for general AI agent workflow development.</p> <code>env</code> <p>This module contains the environmental setup script for AI Agent development.</p> <code>io</code> <code>models</code> <p>This module contains the Model class, used to define the model endpoints that are assigned to agents.</p> <code>printing</code>"},{"location":"documentation/#libs.common","title":"common","text":"<p>Functions:</p> Name Description <code>cosine_similarity</code> <p>Get the cosine similarity between two vectors.</p> <code>describe_variable</code> <p>Describe a variable by printing its name and length.</p> <code>generate_random_name</code> <p>Generate a random name using the RandomWords library.</p> <code>get_class</code> <p>Return the class of a variable as a string.</p> <code>get_varname</code> <p>Return the name of a variable as a string.</p> <code>parse_agent_response</code> <p>Parse the agent response based on the expected response type.</p> <code>query_database</code> <p>Execute a query on the SQLite database.</p> <code>replace_in_dict</code> <p>Recursively replace placeholders in the dictionary values with variable values.</p> <code>replace_placeholders</code> <p>Replace placeholders in the text with actual variable values.</p>"},{"location":"documentation/#libs.common.cosine_similarity","title":"cosine_similarity","text":"<pre><code>cosine_similarity(v1, v2)\n</code></pre> <p>Get the cosine similarity between two vectors.</p> <p>Parameters:</p> Name Type Description Default <code>v1</code> <code>ndarray</code> <p>The first vector.</p> required <code>v2</code> <code>ndarray</code> <p>The second vector.</p> required <p>Returns:</p> Name Type Description <code>float</code> <code>float</code> <p>The cosine similarity between the two vectors.</p>"},{"location":"documentation/#libs.common.describe_variable","title":"describe_variable","text":"<pre><code>describe_variable(variable)\n</code></pre> <p>Describe a variable by printing its name and length.</p> <p>Parameters:</p> Name Type Description Default <code>variable</code> <code>object</code> <p>The variable to be described.</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p>"},{"location":"documentation/#libs.common.generate_random_name","title":"generate_random_name","text":"<pre><code>generate_random_name()\n</code></pre> <p>Generate a random name using the RandomWords library.</p> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>A randomly generated name.</p>"},{"location":"documentation/#libs.common.get_class","title":"get_class","text":"<pre><code>get_class(variable)\n</code></pre> <p>Return the class of a variable as a string.</p> <p>Parameters:</p> Name Type Description Default <code>variable</code> <code>object</code> <p>The variable whose class is to be retrieved.</p> required <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>The base class of the variable as a string.</p>"},{"location":"documentation/#libs.common.get_varname","title":"get_varname","text":"<pre><code>get_varname(variable)\n</code></pre> <p>Return the name of a variable as a string.</p> <p>Parameters:</p> Name Type Description Default <code>variable</code> <code>object</code> <p>The variable whose name is to be retrieved.</p> required <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>The name of the variable.</p>"},{"location":"documentation/#libs.common.parse_agent_response","title":"parse_agent_response","text":"<pre><code>parse_agent_response(full_response, expected_response_type)\n</code></pre> <p>Parse the agent response based on the expected response type.</p> <p>Parameters:</p> Name Type Description Default <code>full_response</code> <code>object</code> <p>The full response object.</p> required <code>expected_response_type</code> <code>str</code> <p>The expected type of the response (e.g., \"json_object\").</p> required <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>The parsed message from the response.</p>"},{"location":"documentation/#libs.common.query_database","title":"query_database","text":"<pre><code>query_database(database, query)\n</code></pre> <p>Execute a query on the SQLite database.</p> <p>Parameters:</p> Name Type Description Default <code>database</code> <code>Connection</code> <p>The SQLite database connection.</p> required <code>query</code> <code>str</code> <p>The SQL query to be executed.</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p>"},{"location":"documentation/#libs.common.replace_in_dict","title":"replace_in_dict","text":"<pre><code>replace_in_dict(input_dict, variables)\n</code></pre> <p>Recursively replace placeholders in the dictionary values with variable values.</p> <p>Parameters:</p> Name Type Description Default <code>input_dict</code> <code>dict</code> <p>The input dictionary containing placeholders.</p> required <code>variables</code> <code>dict</code> <p>A dictionary of variable names and their values.</p> required <p>Returns:</p> Name Type Description <code>dict</code> <code>dict</code> <p>The input dictionary with placeholders replaced.</p>"},{"location":"documentation/#libs.common.replace_placeholders","title":"replace_placeholders","text":"<pre><code>replace_placeholders(text, variables)\n</code></pre> <p>Replace placeholders in the text with actual variable values.</p> <p>Parameters:</p> Name Type Description Default <code>text</code> <code>str</code> <p>The text containing placeholders.</p> required <code>variables</code> <code>dict</code> <p>A dictionary of variable names and their values.</p> required <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>The text with placeholders replaced with variable values.</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If a placeholder does not have a corresponding value in the dictionary.</p>"},{"location":"documentation/#libs.core","title":"core","text":"<p>This module contains the base and extended classes for general AI agent workflow development.</p> <p>Classes:</p> Name Description <code>Agent</code> <p>Class for storing agent information.</p> <code>AgentConfig</code> <p>Class for storing agent configuration settings.</p> <code>Directories</code> <p>Class for handling directory paths related to the project.</p> <code>Event</code> <p>Class representing a single log entry.</p> <code>Log</code> <p>Class that maintains a history of events.</p> <code>MessageLog</code> <p>Class for storing agent messages.</p> <code>Project</code> <p>Class for storing task information.</p> <code>ProjectConfig</code> <p>Class for storing agent configuration settings.</p> <code>Target</code> <p>Class representing a single log entry.</p> <code>Task</code> <p>Class for storing task information.</p> <code>Team</code> <p>Class for managing a team of agents.</p> <code>TeamConfig</code> <p>Class for storing agent configuration settings.</p> <code>TeamMessageLog</code> <p>Class for storing team messages.</p> <code>Timestamp</code> <p>Class for creating and handling timestamps.</p> <p>Functions:</p> Name Description <code>compile_workflow</code> <p>Compiles the workflow from the given state graph.</p> <code>create_agent</code> <p>Creates an agent with the given name.</p> <code>create_team_graph</code> <p>Creates a state graph for a given team.</p> <code>invoke_agent</code> <p>Invokes the agent with the given arguments and keyword arguments.</p> <code>run_team_workflow</code> <p>Runs the team workflow for a given project type and goal.</p> <code>strip_self_refs</code> <p>Replaces periods in self-references with underscores.</p>"},{"location":"documentation/#libs.core.Agent","title":"Agent  <code>dataclass</code>","text":"<pre><code>Agent(name='default', agent_config=None)\n</code></pre> <p>Class for storing agent information.</p> <p>Initializes the Agent with the given name and configuration.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>The name of the agent. Defaults to \"default\".</p> <code>'default'</code> <code>agent_config</code> <code>str</code> <p>The agent configuration name. Defaults to None.</p> <code>None</code> <p>Methods:</p> Name Description <code>change_status</code> <p>Changes the status of the agent.</p> <code>check_finished</code> <p>Checks if the agent has finished its task.</p> <code>fetch_content_for_review</code> <p>Fetches content for review if the agent is a reviewer.</p> <code>fetch_model_client</code> <p>Fetches the model client for the agent.</p> <code>fetch_project_name</code> <p>Fetches the project name.</p> <code>fetch_prompt_arg_vals</code> <p>Fetches the prompt argument values for the agent.</p> <code>fetch_team_name</code> <p>Fetches the team name.</p> <code>format_prompt</code> <p>Formats the prompt for the agent.</p> <code>get_status</code> <p>Gets the current status of the agent.</p> <code>invoke</code> <p>Invokes the agent to perform its task.</p> <code>log_agent</code> <p>Logs an event for the agent.</p> <code>parse_review</code> <p>Parses the review status from the agent's outputs.</p>"},{"location":"documentation/#libs.core.Agent.change_status","title":"change_status","text":"<pre><code>change_status(new_status)\n</code></pre> <p>Changes the status of the agent.</p> <p>Parameters:</p> Name Type Description Default <code>new_status</code> <code>str</code> <p>The new status of the agent.</p> required"},{"location":"documentation/#libs.core.Agent.check_finished","title":"check_finished","text":"<pre><code>check_finished()\n</code></pre> <p>Checks if the agent has finished its task.</p> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>The finished status.</p>"},{"location":"documentation/#libs.core.Agent.fetch_content_for_review","title":"fetch_content_for_review","text":"<pre><code>fetch_content_for_review()\n</code></pre> <p>Fetches content for review if the agent is a reviewer.</p>"},{"location":"documentation/#libs.core.Agent.fetch_model_client","title":"fetch_model_client","text":"<pre><code>fetch_model_client()\n</code></pre> <p>Fetches the model client for the agent.</p>"},{"location":"documentation/#libs.core.Agent.fetch_project_name","title":"fetch_project_name","text":"<pre><code>fetch_project_name()\n</code></pre> <p>Fetches the project name.</p> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>The project name.</p>"},{"location":"documentation/#libs.core.Agent.fetch_prompt_arg_vals","title":"fetch_prompt_arg_vals","text":"<pre><code>fetch_prompt_arg_vals()\n</code></pre> <p>Fetches the prompt argument values for the agent.</p>"},{"location":"documentation/#libs.core.Agent.fetch_team_name","title":"fetch_team_name","text":"<pre><code>fetch_team_name()\n</code></pre> <p>Fetches the team name.</p> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>The team name.</p>"},{"location":"documentation/#libs.core.Agent.format_prompt","title":"format_prompt","text":"<pre><code>format_prompt()\n</code></pre> <p>Formats the prompt for the agent.</p>"},{"location":"documentation/#libs.core.Agent.get_status","title":"get_status","text":"<pre><code>get_status()\n</code></pre> <p>Gets the current status of the agent.</p> <p>Returns:</p> Name Type Description <code>dict</code> <code>dict</code> <p>The current status of the agent.</p>"},{"location":"documentation/#libs.core.Agent.invoke","title":"invoke","text":"<pre><code>invoke(*args, **kwargs)\n</code></pre> <p>Invokes the agent to perform its task.</p> <p>Parameters:</p> Name Type Description Default <code>*args</code> <p>Variable length argument list.</p> <code>()</code> <code>**kwargs</code> <p>Arbitrary keyword arguments.</p> <code>{}</code> <p>Returns:</p> Name Type Description <code>dict</code> <code>dict</code> <p>The updated project and team information.</p>"},{"location":"documentation/#libs.core.Agent.log_agent","title":"log_agent","text":"<pre><code>log_agent(event_description)\n</code></pre> <p>Logs an event for the agent.</p> <p>Parameters:</p> Name Type Description Default <code>event_description</code> <code>str</code> <p>The description of the event.</p> required"},{"location":"documentation/#libs.core.Agent.parse_review","title":"parse_review","text":"<pre><code>parse_review()\n</code></pre> <p>Parses the review status from the agent's outputs.</p> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>The review status.</p>"},{"location":"documentation/#libs.core.AgentConfig","title":"AgentConfig  <code>dataclass</code>","text":"<pre><code>AgentConfig(name='default')\n</code></pre> <p>Class for storing agent configuration settings.</p> <p>Initializes the AgentConfig with the given name.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>The name of the agent configuration. Defaults to \"default\".</p> <code>'default'</code> <p>Methods:</p> Name Description <code>__print__</code> <p>Prints the agent configuration.</p>"},{"location":"documentation/#libs.core.AgentConfig.__print__","title":"__print__","text":"<pre><code>__print__()\n</code></pre> <p>Prints the agent configuration.</p>"},{"location":"documentation/#libs.core.Directories","title":"Directories  <code>dataclass</code>","text":"<pre><code>Directories()\n</code></pre> <p>Class for handling directory paths related to the project.</p> <p>Initializes the Directories class with the given project name.</p> <p>Methods:</p> Name Description <code>get_directories</code> <p>Initializes and sets the directory paths.</p>"},{"location":"documentation/#libs.core.Directories.get_directories","title":"get_directories","text":"<pre><code>get_directories()\n</code></pre> <p>Initializes and sets the directory paths.</p>"},{"location":"documentation/#libs.core.Event","title":"Event  <code>dataclass</code>","text":"<pre><code>Event(target, action)\n</code></pre> <p>Class representing a single log entry.</p> <p>Initializes the Event class.</p> <p>Parameters:</p> Name Type Description Default <code>target</code> <code>Target</code> <p>The target of the event.</p> required <code>action</code> <code>str</code> <p>The description of the event.</p> required <p>Methods:</p> Name Description <code>unpack</code> <p>Unpacks the event details into a dictionary.</p>"},{"location":"documentation/#libs.core.Event.unpack","title":"unpack","text":"<pre><code>unpack()\n</code></pre> <p>Unpacks the event details into a dictionary.</p> <p>Returns:</p> Name Type Description <code>dict</code> <code>dict</code> <p>A dictionary containing the event details.</p>"},{"location":"documentation/#libs.core.Log","title":"Log  <code>dataclass</code>","text":"<pre><code>Log()\n</code></pre> <p>Class that maintains a history of events.</p> <p>Initializes the Log class.</p> <p>Methods:</p> Name Description <code>add</code> <p>Records an event in the log.</p> <code>search</code> <p>Searches the log for events with a specific description.</p> <code>search_log_targets</code> <p>Searches the log for events with a specific target.</p> <code>update_last</code> <p>Updates the last event in the log.</p>"},{"location":"documentation/#libs.core.Log.add","title":"add","text":"<pre><code>add(event)\n</code></pre> <p>Records an event in the log.</p> <p>Parameters:</p> Name Type Description Default <code>event</code> <code>Event</code> <p>The event to be recorded.</p> required"},{"location":"documentation/#libs.core.Log.search","title":"search","text":"<pre><code>search(term)\n</code></pre> <p>Searches the log for events with a specific description.</p> <p>Parameters:</p> Name Type Description Default <code>term</code> <code>str</code> <p>The term to search for in the event description.</p> required <p>Returns:</p> Name Type Description <code>list</code> <code>list</code> <p>A list of log events that match the search term.</p>"},{"location":"documentation/#libs.core.Log.search_log_targets","title":"search_log_targets","text":"<pre><code>search_log_targets(term)\n</code></pre> <p>Searches the log for events with a specific target.</p> <p>Parameters:</p> Name Type Description Default <code>term</code> <code>str</code> <p>The term to search for in the target.</p> required <p>Returns:</p> Name Type Description <code>list</code> <code>list</code> <p>A list of log events that match the search term.</p>"},{"location":"documentation/#libs.core.Log.update_last","title":"update_last","text":"<pre><code>update_last()\n</code></pre> <p>Updates the last event in the log.</p>"},{"location":"documentation/#libs.core.MessageLog","title":"MessageLog  <code>dataclass</code>","text":"<pre><code>MessageLog()\n</code></pre> <p>Class for storing agent messages.</p> <p>Initializes the MessageLog class.</p> <p>Methods:</p> Name Description <code>add_message</code> <p>Adds a message to the log.</p> <code>search_messages</code> <p>Searches the log for messages containing a specific term.</p> <code>update_last</code> <p>Updates the last message in the log.</p>"},{"location":"documentation/#libs.core.MessageLog.add_message","title":"add_message","text":"<pre><code>add_message(message)\n</code></pre> <p>Adds a message to the log.</p> <p>Parameters:</p> Name Type Description Default <code>message</code> <code>str</code> <p>The message to be added.</p> required"},{"location":"documentation/#libs.core.MessageLog.search_messages","title":"search_messages","text":"<pre><code>search_messages(term)\n</code></pre> <p>Searches the log for messages containing a specific term.</p> <p>Parameters:</p> Name Type Description Default <code>term</code> <code>str</code> <p>The term to search for in the messages.</p> required <p>Returns:</p> Name Type Description <code>list</code> <code>list</code> <p>A list of messages that match the search term.</p>"},{"location":"documentation/#libs.core.MessageLog.update_last","title":"update_last","text":"<pre><code>update_last()\n</code></pre> <p>Updates the last message in the log.</p>"},{"location":"documentation/#libs.core.Project","title":"Project  <code>dataclass</code>","text":"<pre><code>Project(name='default', goal='Be helpful!')\n</code></pre> <p>Class for storing task information.</p> <p>Initializes the Project with the given name and goal.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>The name of the project. Defaults to \"default\".</p> <code>'default'</code> <code>goal</code> <code>str</code> <p>The goal of the project. Defaults to \"Be helpful!\".</p> <code>'Be helpful!'</code> <p>Methods:</p> Name Description <code>__call__</code> <p>Updates the project and returns the current instance.</p> <code>add_team</code> <p>Adds a team to the project.</p> <code>assemble_teams</code> <p>Assembles teams based on the project configuration.</p> <code>fetch_final_answers</code> <p>Fetches final answers from all teams.</p> <code>fetch_plan_goals</code> <p>Fetches plan and goals from final answers of all teams.</p> <code>get_team_names</code> <p>Gets the names of all teams in the project.</p> <code>log_event</code> <p>Logs an event with the given description.</p> <code>push_project_updates</code> <p>Pushes project updates to all teams and their members.</p> <code>request_introductions</code> <p>Requests introductions from all team members.</p> <code>return_self</code> <p>Returns the current instance of the Project.</p> <code>update</code> <p>Updates the project by fetching logs and final answers from all teams.</p>"},{"location":"documentation/#libs.core.Project.__call__","title":"__call__","text":"<pre><code>__call__(*args, **kwargs)\n</code></pre> <p>Updates the project and returns the current instance.</p> <p>Parameters:</p> Name Type Description Default <code>*args</code> <p>Variable length argument list.</p> <code>()</code> <code>**kwargs</code> <p>Arbitrary keyword arguments.</p> <code>{}</code> <p>Returns:</p> Name Type Description <code>dict</code> <code>dict</code> <p>A dictionary containing the current instance of the Project.</p>"},{"location":"documentation/#libs.core.Project.add_team","title":"add_team","text":"<pre><code>add_team(team2add='default')\n</code></pre> <p>Adds a team to the project.</p> <p>Parameters:</p> Name Type Description Default <code>team2add</code> <code>str</code> <p>The name of the team to add. Defaults to \"default\".</p> <code>'default'</code>"},{"location":"documentation/#libs.core.Project.assemble_teams","title":"assemble_teams","text":"<pre><code>assemble_teams()\n</code></pre> <p>Assembles teams based on the project configuration.</p>"},{"location":"documentation/#libs.core.Project.fetch_final_answers","title":"fetch_final_answers","text":"<pre><code>fetch_final_answers()\n</code></pre> <p>Fetches final answers from all teams.</p>"},{"location":"documentation/#libs.core.Project.fetch_plan_goals","title":"fetch_plan_goals","text":"<pre><code>fetch_plan_goals()\n</code></pre> <p>Fetches plan and goals from final answers of all teams.</p>"},{"location":"documentation/#libs.core.Project.get_team_names","title":"get_team_names","text":"<pre><code>get_team_names()\n</code></pre> <p>Gets the names of all teams in the project.</p> <p>Returns:</p> Name Type Description <code>list</code> <code>list</code> <p>A list of team names.</p>"},{"location":"documentation/#libs.core.Project.log_event","title":"log_event","text":"<pre><code>log_event(event_description)\n</code></pre> <p>Logs an event with the given description.</p> <p>Parameters:</p> Name Type Description Default <code>event_description</code> <code>str</code> <p>The description of the event.</p> required"},{"location":"documentation/#libs.core.Project.push_project_updates","title":"push_project_updates","text":"<pre><code>push_project_updates()\n</code></pre> <p>Pushes project updates to all teams and their members.</p>"},{"location":"documentation/#libs.core.Project.request_introductions","title":"request_introductions","text":"<pre><code>request_introductions()\n</code></pre> <p>Requests introductions from all team members.</p>"},{"location":"documentation/#libs.core.Project.return_self","title":"return_self","text":"<pre><code>return_self()\n</code></pre> <p>Returns the current instance of the Project.</p> <p>Returns:</p> Name Type Description <code>Project</code> <code>Project</code> <p>The current instance of the Project.</p>"},{"location":"documentation/#libs.core.Project.update","title":"update","text":"<pre><code>update()\n</code></pre> <p>Updates the project by fetching logs and final answers from all teams.</p>"},{"location":"documentation/#libs.core.ProjectConfig","title":"ProjectConfig  <code>dataclass</code>","text":"<pre><code>ProjectConfig(name='default')\n</code></pre> <p>Class for storing agent configuration settings.</p> <p>Initializes the ProjectConfig with the given name.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>The name of the project configuration. Defaults to \"default\".</p> <code>'default'</code> <p>Methods:</p> Name Description <code>__print__</code> <p>Prints the dictionary representation of the ProjectConfig.</p>"},{"location":"documentation/#libs.core.ProjectConfig.__print__","title":"__print__","text":"<pre><code>__print__()\n</code></pre> <p>Prints the dictionary representation of the ProjectConfig.</p>"},{"location":"documentation/#libs.core.Target","title":"Target  <code>dataclass</code>","text":"<pre><code>Target(target_class, name)\n</code></pre> <p>Class representing a single log entry.</p> <p>Initializes the Target class.</p> <p>Parameters:</p> Name Type Description Default <code>target_class</code> <code>str</code> <p>The class of the target.</p> required <code>name</code> <code>str</code> <p>The name of the target.</p> required"},{"location":"documentation/#libs.core.Task","title":"Task  <code>dataclass</code>","text":"<pre><code>Task(persona='default', assignee='task_manager', **kwargs)\n</code></pre> <p>Class for storing task information.</p> <p>Methods:</p> Name Description <code>prioritize</code> <p>Sets the task to highest priority.</p> <code>set_finished</code> <p>Sets the task to finished.</p>"},{"location":"documentation/#libs.core.Task.prioritize","title":"prioritize","text":"<pre><code>prioritize()\n</code></pre> <p>Sets the task to highest priority.</p>"},{"location":"documentation/#libs.core.Task.set_finished","title":"set_finished","text":"<pre><code>set_finished()\n</code></pre> <p>Sets the task to finished.</p>"},{"location":"documentation/#libs.core.Team","title":"Team  <code>dataclass</code>","text":"<pre><code>Team(project, config_name='default')\n</code></pre> <p>Class for managing a team of agents. The name of the team determines the config that is retrieved</p> <p>Initializes the Team with the given project and configuration name.</p> <p>Parameters:</p> Name Type Description Default <code>project</code> <code>dict</code> <p>The project details.</p> required <code>config_name</code> <code>str</code> <p>The name of the team configuration. Defaults to \"default\".</p> <code>'default'</code> <p>Methods:</p> Name Description <code>__call__</code> <p>Calls the update method and returns the current team instance.</p> <code>add_member</code> <p>Adds a member to the team.</p> <code>add_reviewer</code> <p>Adds a reviewer to the team.</p> <code>assemble_team</code> <p>Assembles the team by adding members and reviewers if needed.</p> <code>check_finished</code> <p>Checks if a member has finished their task.</p> <code>fetch_member_names</code> <p>Fetches the names of all members in the team.</p> <code>fetch_updates</code> <p>Fetches updates from all team members.</p> <code>get_member_index</code> <p>Gets the index of a member in the team.</p> <code>push_reviews</code> <p>Pushes reviews from reviewers to the respective members.</p> <code>push_team_updates</code> <p>Pushes the current team instance to all members.</p> <code>request_introductions</code> <p>Requests introductions from all team members.</p> <code>return_self</code> <p>Returns the current instance of the team.</p> <code>update</code> <p>Updates the team by fetching updates, pushing reviews, and pushing team updates.</p>"},{"location":"documentation/#libs.core.Team.__call__","title":"__call__","text":"<pre><code>__call__(*args, **kwargs)\n</code></pre> <p>Calls the update method and returns the current team instance.</p> <p>Parameters:</p> Name Type Description Default <code>*args</code> <p>Variable length argument list.</p> <code>()</code> <code>**kwargs</code> <p>Arbitrary keyword arguments.</p> <code>{}</code> <p>Returns:</p> Name Type Description <code>dict</code> <code>dict</code> <p>A dictionary containing the current team instance.</p>"},{"location":"documentation/#libs.core.Team.add_member","title":"add_member","text":"<pre><code>add_member(agent2add='default')\n</code></pre> <p>Adds a member to the team.</p> <p>Parameters:</p> Name Type Description Default <code>agent2add</code> <code>str</code> <p>The name of the agent to add. Defaults to \"default\".</p> <code>'default'</code>"},{"location":"documentation/#libs.core.Team.add_reviewer","title":"add_reviewer","text":"<pre><code>add_reviewer(agent2review)\n</code></pre> <p>Adds a reviewer to the team.</p> <p>Parameters:</p> Name Type Description Default <code>agent2review</code> <code>str</code> <p>The name of the agent to review.</p> required"},{"location":"documentation/#libs.core.Team.assemble_team","title":"assemble_team","text":"<pre><code>assemble_team()\n</code></pre> <p>Assembles the team by adding members and reviewers if needed.</p>"},{"location":"documentation/#libs.core.Team.check_finished","title":"check_finished","text":"<pre><code>check_finished(member_name='')\n</code></pre> <p>Checks if a member has finished their task.</p> <p>Parameters:</p> Name Type Description Default <code>member_name</code> <code>str</code> <p>The name of the member.</p> <code>''</code> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>\"True\" if the member has finished, otherwise \"False\".</p>"},{"location":"documentation/#libs.core.Team.fetch_member_names","title":"fetch_member_names","text":"<pre><code>fetch_member_names()\n</code></pre> <p>Fetches the names of all members in the team.</p> <p>Returns:</p> Name Type Description <code>list</code> <code>list</code> <p>A list of member names.</p>"},{"location":"documentation/#libs.core.Team.fetch_updates","title":"fetch_updates","text":"<pre><code>fetch_updates()\n</code></pre> <p>Fetches updates from all team members.</p>"},{"location":"documentation/#libs.core.Team.get_member_index","title":"get_member_index","text":"<pre><code>get_member_index(member_name='')\n</code></pre> <p>Gets the index of a member in the team.</p> <p>Parameters:</p> Name Type Description Default <code>member_name</code> <code>str</code> <p>The name of the member.</p> <code>''</code> <p>Returns:</p> Name Type Description <code>int</code> <code>int</code> <p>The index of the member.</p>"},{"location":"documentation/#libs.core.Team.push_reviews","title":"push_reviews","text":"<pre><code>push_reviews()\n</code></pre> <p>Pushes reviews from reviewers to the respective members.</p>"},{"location":"documentation/#libs.core.Team.push_team_updates","title":"push_team_updates","text":"<pre><code>push_team_updates()\n</code></pre> <p>Pushes the current team instance to all members.</p>"},{"location":"documentation/#libs.core.Team.request_introductions","title":"request_introductions","text":"<pre><code>request_introductions()\n</code></pre> <p>Requests introductions from all team members.</p>"},{"location":"documentation/#libs.core.Team.return_self","title":"return_self","text":"<pre><code>return_self()\n</code></pre> <p>Returns the current instance of the team.</p> <p>Returns:</p> Name Type Description <code>Team</code> <code>Team</code> <p>The current instance of the team.</p>"},{"location":"documentation/#libs.core.Team.update","title":"update","text":"<pre><code>update()\n</code></pre> <p>Updates the team by fetching updates, pushing reviews, and pushing team updates.</p>"},{"location":"documentation/#libs.core.TeamConfig","title":"TeamConfig  <code>dataclass</code>","text":"<pre><code>TeamConfig(name='default')\n</code></pre> <p>Class for storing agent configuration settings.</p> <p>Initializes the TeamConfig with the given name.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>The name of the team configuration. Defaults to \"default\".</p> <code>'default'</code>"},{"location":"documentation/#libs.core.TeamMessageLog","title":"TeamMessageLog  <code>dataclass</code>","text":"<pre><code>TeamMessageLog()\n</code></pre> <p>Class for storing team messages.</p> <p>Initializes the TeamMessageLog class.</p> <p>Methods:</p> Name Description <code>search_team_messages_content</code> <p>Searches the group messages for content containing a specific term.</p>"},{"location":"documentation/#libs.core.TeamMessageLog.search_team_messages_content","title":"search_team_messages_content","text":"<pre><code>search_team_messages_content(term)\n</code></pre> <p>Searches the group messages for content containing a specific term.</p> <p>Parameters:</p> Name Type Description Default <code>term</code> <code>str</code> <p>The term to search for in the group messages.</p> required <p>Returns:</p> Name Type Description <code>list</code> <code>list</code> <p>A list of group messages that match the search term.</p>"},{"location":"documentation/#libs.core.Timestamp","title":"Timestamp  <code>dataclass</code>","text":"<pre><code>Timestamp()\n</code></pre> <p>Class for creating and handling timestamps.</p> <p>Initializes the Timestamp class.</p> <p>Methods:</p> Name Description <code>create</code> <p>Generates the current time in various formats.</p>"},{"location":"documentation/#libs.core.Timestamp.create","title":"create","text":"<pre><code>create()\n</code></pre> <p>Generates the current time in various formats.</p>"},{"location":"documentation/#libs.core.compile_workflow","title":"compile_workflow","text":"<pre><code>compile_workflow(graph)\n</code></pre> <p>Compiles the workflow from the given state graph.</p> <p>Parameters:</p> Name Type Description Default <code>graph</code> <code>StateGraph</code> <p>The state graph to compile.</p> required <p>Returns:</p> Name Type Description <code>dict</code> <code>dict</code> <p>The compiled workflow.</p>"},{"location":"documentation/#libs.core.create_agent","title":"create_agent","text":"<pre><code>create_agent(agent_name)\n</code></pre> <p>Creates an agent with the given name.</p> <p>Parameters:</p> Name Type Description Default <code>agent_name</code> <code>str</code> <p>The name of the agent.</p> required <p>Returns:</p> Name Type Description <code>tuple</code> <code>tuple</code> <p>The created agent and its model configuration.</p>"},{"location":"documentation/#libs.core.create_team_graph","title":"create_team_graph","text":"<pre><code>create_team_graph(team)\n</code></pre> <p>Creates a state graph for a given team.</p> <p>Parameters:</p> Name Type Description Default <code>team</code> <code>Team</code> <p>The team for which the state graph is created.</p> required <p>Returns:</p> Name Type Description <code>StateGraph</code> <code>StateGraph</code> <p>The state graph representing the team's workflow.</p>"},{"location":"documentation/#libs.core.invoke_agent","title":"invoke_agent","text":"<pre><code>invoke_agent(agent, *args, **kwargs)\n</code></pre> <p>Invokes the agent with the given arguments and keyword arguments.</p> <p>Parameters:</p> Name Type Description Default <code>agent</code> <code>Agent</code> <p>The agent to be invoked.</p> required <code>*args</code> <p>Variable length argument list.</p> <code>()</code> <code>**kwargs</code> <p>Arbitrary keyword arguments.</p> <code>{}</code> <p>Returns:</p> Name Type Description <code>tuple</code> <code>tuple</code> <p>The response and model artifact.</p>"},{"location":"documentation/#libs.core.run_team_workflow","title":"run_team_workflow","text":"<pre><code>run_team_workflow(\n    project_type=\"small\",\n    project_goal=\"Tell a funny dad joke\",\n    **kwargs\n)\n</code></pre> <p>Runs the team workflow for a given project type and goal.</p> <p>Parameters:</p> Name Type Description Default <code>project_type</code> <code>str</code> <p>The type of the project. Defaults to \"small\".</p> <code>'small'</code> <code>project_goal</code> <code>str</code> <p>The goal of the project. Defaults to \"Tell a funny dad joke\".</p> <code>'Tell a funny dad joke'</code> <code>**kwargs</code> <p>Additional keyword arguments.</p> <code>{}</code> <p>Returns:</p> Name Type Description <code>Team</code> <code>Team</code> <p>The team after running the workflow.</p>"},{"location":"documentation/#libs.core.strip_self_refs","title":"strip_self_refs","text":"<pre><code>strip_self_refs(self_reference)\n</code></pre> <p>Replaces periods in self-references with underscores.</p> <p>Parameters:</p> Name Type Description Default <code>self_reference</code> <code>str</code> <p>The self-reference string to be modified.</p> required <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>The modified self-reference string.</p>"},{"location":"documentation/#libs.env","title":"env","text":"<p>This module contains the environmental setup script for AI Agent development.</p>"},{"location":"documentation/#libs.io","title":"io","text":"<p>Classes:</p> Name Description <code>File</code> <p>Class for file configuration.</p> <code>IO</code> <p>Base class for file I/O operations.</p> <code>IOtext</code> <p>I/O class for handling text files.</p> <p>Functions:</p> Name Description <code>read_csv</code> <p>Reads a CSV file and returns its contents as a DataFrame.</p> <code>read_database</code> <p>Attempts to connect to an SQLite database and returns the connection.</p> <code>read_file</code> <p>Reads a file based on its extension and returns its contents.</p> <code>read_joblib</code> <p>Reads a text file and returns its contents as a string.</p> <code>read_json</code> <p>Reads a JSON file and returns its contents as a dictionary.</p> <code>read_parquet</code> <p>Reads a Parquet file and returns its contents as a DataFrame.</p> <code>read_xlsx</code> <p>Reads an Excel (XLSX) file and returns its contents as a DataFrame.</p> <code>write_csv</code> <p>Writes the given DataFrame to a CSV file.</p> <code>write_file</code> <p>Writes content to a file based on its extension.</p> <code>write_joblib</code> <p>Reads a text file and returns its contents as a string.</p> <code>write_json</code> <p>Writes the given dictionary to a JSON file.</p> <code>write_parquet</code> <p>Writes the given DataFrame or PyArrow Table to a Parquet file.</p>"},{"location":"documentation/#libs.io.File","title":"File","text":"<p>               Bases: <code>BaseModel</code></p> <p>Class for file configuration.</p> <p>This class uses helper functions to initialize attributes like path, name, type, and existence. It also creates an appropriate I/O handler based on the file type (currently only text files are supported).</p> <p>Methods:</p> Name Description <code>read</code> <p>Reads the file content using the I/O handler.</p> <code>write</code> <p>Writes data to the file using the I/O handler.</p>"},{"location":"documentation/#libs.io.File.read","title":"read","text":"<pre><code>read()\n</code></pre> <p>Reads the file content using the I/O handler.</p> <p>Returns:</p> Type Description <code>Any</code> <p>The content read from the file.</p>"},{"location":"documentation/#libs.io.File.write","title":"write","text":"<pre><code>write(content)\n</code></pre> <p>Writes data to the file using the I/O handler.</p> <p>Parameters:</p> Name Type Description Default <code>content</code> <code>Any</code> <p>The data to write to the file.</p> required"},{"location":"documentation/#libs.io.IO","title":"IO","text":"<p>               Bases: <code>BaseModel</code></p> <p>Base class for file I/O operations.</p> <p>This class defines the basic structure and interface for file readers and writers. Specific file types should subclass IO and implement the read and write methods.</p> <p>Methods:</p> Name Description <code>read</code> <p>Read the file content.</p> <code>write</code> <p>Write data to the file.</p>"},{"location":"documentation/#libs.io.IO.read","title":"read","text":"<pre><code>read(filepath=None, **kwargs)\n</code></pre> <p>Read the file content.</p> <p>This method is expected to be overridden by subclasses.</p>"},{"location":"documentation/#libs.io.IO.write","title":"write","text":"<pre><code>write(filepath=None, data=None, **kwargs)\n</code></pre> <p>Write data to the file.</p> <p>This method is expected to be overridden by subclasses.</p>"},{"location":"documentation/#libs.io.IOtext","title":"IOtext","text":"<p>               Bases: <code>IO</code></p> <p>I/O class for handling text files.</p> <p>Inherits from IO and implements the read and write methods using standard Python I/O.</p> <p>Methods:</p> Name Description <code>read</code> <p>Reads a text file and returns its contents as a string.</p> <code>write</code> <p>Writes a string to a text file.</p>"},{"location":"documentation/#libs.io.IOtext.read","title":"read","text":"<pre><code>read(filepath=None, **kwargs)\n</code></pre> <p>Reads a text file and returns its contents as a string.</p> <p>Parameters:</p> Name Type Description Default <code>filepath</code> <code>str</code> <p>The path to the text file. If not provided,                       the instance's <code>path</code> attribute is used.</p> <code>None</code> <code>encoding</code> <code>str</code> <p>The file encoding (default is \"utf-8\").</p> required <p>Returns:</p> Type Description <code>Optional[str]</code> <p>Optional[str]: The contents of the file, or None if reading fails.</p>"},{"location":"documentation/#libs.io.IOtext.write","title":"write","text":"<pre><code>write(filepath=None, data='', **kwargs)\n</code></pre> <p>Writes a string to a text file.</p> <p>Parameters:</p> Name Type Description Default <code>filepath</code> <code>str</code> <p>The path to the text file. If not provided,                       the instance's <code>path</code> attribute is used.</p> <code>None</code> <code>data</code> <code>str</code> <p>The text content to write.</p> <code>''</code>"},{"location":"documentation/#libs.io._check_exists","title":"_check_exists","text":"<pre><code>_check_exists(*args, **kwargs)\n</code></pre> <p>Check if a file exists at the specified filepath.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str</code> <p>The path to the file.</p> required <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if the file exists, otherwise False.</p>"},{"location":"documentation/#libs.io._get_abspath","title":"_get_abspath","text":"<pre><code>_get_abspath(*args, **kwargs)\n</code></pre> <p>Return the absolute path based on a provided 'path' keyword argument.</p> Example <p>_get_abspath(path=\"relative/path.txt\")</p>"},{"location":"documentation/#libs.io._get_basename","title":"_get_basename","text":"<pre><code>_get_basename(*args, **kwargs)\n</code></pre> <p>Return the base name (the final component) of the given 'path'.</p> Example <p>_get_basename(path=\"/full/path/to/file.txt\")</p>"},{"location":"documentation/#libs.io._get_class","title":"_get_class","text":"<pre><code>_get_class(class_name=None)\n</code></pre> <p>Return the class object given its name as a string.</p>"},{"location":"documentation/#libs.io._get_filetype","title":"_get_filetype","text":"<pre><code>_get_filetype(*args, **kwargs)\n</code></pre> <p>Return the file type (file extension) from the provided 'path'.</p> Example <p>_get_type(path=\"/full/path/to/file.txt\")  -&gt; \"txt\"</p>"},{"location":"documentation/#libs.io._get_io","title":"_get_io","text":"<pre><code>_get_io(self)\n</code></pre> <p>Factory method to return an instance of the appropriate I/O subclass based on the file type.</p>"},{"location":"documentation/#libs.io._get_name","title":"_get_name","text":"<pre><code>_get_name(variable=None)\n</code></pre> <p>Return the name attribute of a variable, if available.</p>"},{"location":"documentation/#libs.io._print_io_status","title":"_print_io_status","text":"<pre><code>_print_io_status(filepath, action, status, **kwargs)\n</code></pre> <p>Print the status of an I/O operation.</p> <p>Parameters:</p> Name Type Description Default <code>filepath</code> <code>str</code> <p>The file path.</p> required <code>action</code> <code>str</code> <p>The action performed (e.g., READ, WRITE).</p> required <code>status</code> <code>str</code> <p>The status of the action (e.g., SUCCESS, FAIL).</p> required <code>error</code> <code>Exception</code> <p>The error encountered (if any).</p> required"},{"location":"documentation/#libs.io.read_csv","title":"read_csv","text":"<pre><code>read_csv(filepath)\n</code></pre> <p>Reads a CSV file and returns its contents as a DataFrame.</p> <p>This function attempts to read a CSV file from the specified filepath. If successful, it logs a \"SUCCESS\" status and returns the contents of the file as a DataFrame. If an error occurs, it logs a \"FAIL\" status.</p> <p>Parameters:</p> Name Type Description Default <code>filepath</code> <code>str</code> <p>The path to the CSV file to be read.</p> required <p>Returns:</p> Type Description <code>DataFrame | None</code> <p>pd.DataFrame: The contents of the CSV file if read successfully,</p> <code>DataFrame | None</code> <p>otherwise None.</p> <p>Raises:</p> Type Description <code>Exception</code> <p>If any error occurs during reading the CSV file.</p>"},{"location":"documentation/#libs.io.read_database","title":"read_database","text":"<pre><code>read_database(filepath)\n</code></pre> <p>Attempts to connect to an SQLite database and returns the connection.</p> <p>Parameters:</p> Name Type Description Default <code>filepath</code> <code>str</code> <p>The path to the SQLite database file.</p> required <p>Returns:</p> Type Description <code>Connection | None</code> <p>sqlite3.Connection or None: The SQLite database connection if successful, otherwise None.</p>"},{"location":"documentation/#libs.io.read_file","title":"read_file","text":"<pre><code>read_file(filepath)\n</code></pre> <p>Reads a file based on its extension and returns its contents.</p> <p>Parameters:</p> Name Type Description Default <code>filepath</code> <code>str</code> <p>The path to the file to be read.</p> required <p>Returns:</p> Type Description <code>object | None</code> <p>The contents of the file read based on its extension.</p>"},{"location":"documentation/#libs.io.read_joblib","title":"read_joblib","text":"<pre><code>read_joblib(filepath)\n</code></pre> <p>Reads a text file and returns its contents as a string.</p> <p>Parameters:</p> Name Type Description Default <code>filepath</code> <code>str</code> <p>The path to the text file to be read.</p> required <p>Returns:</p> Name Type Description <code>str</code> <code>str | None</code> <p>The contents of the text file if read successfully,</p> <code>str | None</code> <p>otherwise None.</p>"},{"location":"documentation/#libs.io.read_json","title":"read_json","text":"<pre><code>read_json(filepath)\n</code></pre> <p>Reads a JSON file and returns its contents as a dictionary.</p> <p>Parameters:</p> Name Type Description Default <code>filepath</code> <code>str</code> <p>The path to the JSON file to be read.</p> required <p>Returns:</p> Name Type Description <code>dict</code> <code>dict | None</code> <p>The contents of the JSON file if read successfully,</p> <code>dict | None</code> <p>otherwise None.</p>"},{"location":"documentation/#libs.io.read_parquet","title":"read_parquet","text":"<pre><code>read_parquet(filepath)\n</code></pre> <p>Reads a Parquet file and returns its contents as a DataFrame.</p> <p>Parameters:</p> Name Type Description Default <code>filepath</code> <code>str</code> <p>The path to the Parquet file to be read.</p> required <p>Returns:</p> Type Description <code>DataFrame | None</code> <p>pd.DataFrame: The contents of the Parquet file if read successfully,</p> <code>DataFrame | None</code> <p>otherwise None.</p>"},{"location":"documentation/#libs.io.read_xlsx","title":"read_xlsx","text":"<pre><code>read_xlsx(filepath)\n</code></pre> <p>Reads an Excel (XLSX) file and returns its contents as a DataFrame.</p> <p>Parameters:</p> Name Type Description Default <code>filepath</code> <code>str</code> <p>The path to the XLSX file to be read.</p> required <p>Returns:</p> Type Description <code>DataFrame | None</code> <p>pd.DataFrame: The contents of the XLSX file if read successfully,</p> <code>DataFrame | None</code> <p>otherwise None.</p>"},{"location":"documentation/#libs.io.write_csv","title":"write_csv","text":"<pre><code>write_csv(content, filepath)\n</code></pre> <p>Writes the given DataFrame to a CSV file.</p> <p>Parameters:</p> Name Type Description Default <code>content</code> <code>DataFrame</code> <p>The DataFrame to write to the CSV file.</p> required <code>filepath</code> <code>str</code> <p>The path to the CSV file to be written.</p> required"},{"location":"documentation/#libs.io.write_file","title":"write_file","text":"<pre><code>write_file(content, filepath)\n</code></pre> <p>Writes content to a file based on its extension.</p> <p>Parameters:</p> Name Type Description Default <code>content</code> <code>object</code> <p>The content to write to the file.</p> required <code>filepath</code> <code>str</code> <p>The path to the file to be written.</p> required"},{"location":"documentation/#libs.io.write_joblib","title":"write_joblib","text":"<pre><code>write_joblib(content, filepath)\n</code></pre> <p>Reads a text file and returns its contents as a string.</p> <p>Parameters:</p> Name Type Description Default <code>filepath</code> <code>str</code> <p>The path to the text file to be read.</p> required <p>Returns:</p> Name Type Description <code>str</code> <code>str | None</code> <p>The contents of the text file if read successfully,</p> <code>str | None</code> <p>otherwise None.</p>"},{"location":"documentation/#libs.io.write_json","title":"write_json","text":"<pre><code>write_json(content, filepath)\n</code></pre> <p>Writes the given dictionary to a JSON file.</p> <p>Parameters:</p> Name Type Description Default <code>content</code> <code>dict</code> <p>The content to write to the JSON file.</p> required <code>filepath</code> <code>str</code> <p>The path to the JSON file to be written.</p> required"},{"location":"documentation/#libs.io.write_parquet","title":"write_parquet","text":"<pre><code>write_parquet(content, filepath)\n</code></pre> <p>Writes the given DataFrame or PyArrow Table to a Parquet file.</p> <p>Parameters:</p> Name Type Description Default <code>content</code> <code>DataFrame or Table</code> <p>The content to write to the Parquet file.</p> required <code>filepath</code> <code>str</code> <p>The path to the Parquet file to be written.</p> required"},{"location":"documentation/#libs.models","title":"models","text":"<p>This module contains the Model class, used to define the model endpoints that are assigned to agents.</p> <p>Classes:</p> Name Description <code>Model</code> <p>Class for LLM and Embedder clients</p> <code>ModelConfig</code> <p>Class for model configuration</p>"},{"location":"documentation/#libs.models.Model","title":"Model","text":"<pre><code>Model(model_config=ModelConfig())\n</code></pre> <p>               Bases: <code>BaseModel</code></p> <p>Class for LLM and Embedder clients</p>"},{"location":"documentation/#libs.models.ModelConfig","title":"ModelConfig","text":"<pre><code>ModelConfig(**kwargs)\n</code></pre> <p>               Bases: <code>BaseModel</code></p> <p>Class for model configuration</p>"},{"location":"documentation/#libs.printing","title":"printing","text":"<p>Functions:</p> Name Description <code>eprint</code> <p>Pretty print a given object with no sorting,</p> <code>map_member_colors</code> <p>Map member names to colors.</p> <code>print_dict</code> <p>Print a dictionary with colored keys and values.</p> <code>print_heading</code> <p>Print a heading with a title enclosed in dashes.</p>"},{"location":"documentation/#libs.printing.eprint","title":"eprint","text":"<pre><code>eprint(printable, color=['blue', 'green'], width=80)\n</code></pre> <p>Pretty print a given object with no sorting,</p> <p>Parameters:</p> Name Type Description Default <code>printable</code> <code>object</code> <p>The object to be pretty printed.</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p>"},{"location":"documentation/#libs.printing.map_member_colors","title":"map_member_colors","text":"<pre><code>map_member_colors(member_names, color_names)\n</code></pre> <p>Map member names to colors.</p> <p>Parameters:</p> Name Type Description Default <code>member_names</code> <code>list</code> <p>A list of member names.</p> required <code>color_names</code> <code>list</code> <p>A list of color names.</p> required <p>Returns:</p> Name Type Description <code>dict</code> <code>dict</code> <p>A dictionary mapping member names to colors.</p>"},{"location":"documentation/#libs.printing.print_dict","title":"print_dict","text":"<pre><code>print_dict(\n    dict2print, colors=[\"cyan\", \"light_blue\"], width=80\n)\n</code></pre> <p>Print a dictionary with colored keys and values.</p> <p>Parameters:</p> Name Type Description Default <code>dict2print</code> <code>dict</code> <p>The dictionary to be printed.</p> required <code>colors</code> <code>list</code> <p>The color of the keys and values. Defaults to [\"cyan\",\"light_blue\"].</p> <code>['cyan', 'light_blue']</code> <code>width</code> <code>(int, optional)</code> <p>The width of the output. Defaults to 80.</p> <code>80</code> <p>Returns:     None</p>"},{"location":"documentation/#libs.printing.print_heading","title":"print_heading","text":"<pre><code>print_heading(title_text, color='cyan')\n</code></pre> <p>Print a heading with a title enclosed in dashes.</p> <p>Parameters:</p> Name Type Description Default <code>title_text</code> <code>str</code> <p>The title text to be printed.</p> required <code>color</code> <code>str</code> <p>The color of the heading. Defaults to \"cyan\".</p> <code>'cyan'</code> <p>Returns:</p> Type Description <code>None</code> <p>None</p>"}]}